//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
    groupshared uint temp[2 * THREAD_GROUP_SIZE_X];
}

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

StructuredBuffer<uint> _InstancePredicatesIn;
RWStructuredBuffer<uint> _GroupSumArray;
RWStructuredBuffer<uint> _ScannedInstancePredicates;

//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

// Based on Parallel Prefix Sum (Scan) with CUDA by Mark Harris
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )        
{
    // scanInstancesCS.Dispatch(m_scanInstancesKernelID, m_numberOfInstances / (2 * THREAD_GROUP_SIZE_X) , 1, 1);
    int tID = (int) _dispatchThreadID.x; 
    int threadID = (int) _groupThreadID.x;

    int offset = 1;
    temp[2 * threadID] = _InstancePredicatesIn[2 * tID]; // load input into shared memory
    temp[2 * threadID + 1] = _InstancePredicatesIn[2 * tID + 1];
    int d;
    const int NoofElements = 2 * THREAD_GROUP_SIZE_X;

    //perform reduction
    for (d = NoofElements >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();

        if (threadID < d)
        {
            int ai = offset * (2 * threadID + 1) - 1;
            int bi = offset * (2 * threadID + 2) - 1;
            temp[bi] += temp[ai];
        }
        offset *= 2;
    }

    // clear the last element
    if (threadID == 0)
    {
        _GroupSumArray[_groupID.x] = temp[NoofElements - 1];
        temp[NoofElements - 1] = 0;
    }

    //perform downsweep and build scan
    for (d = 1; d < NoofElements; d *= 2)
    {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();

        if (threadID < d)
        {
            int ai = offset * (2 * threadID + 1) - 1;
            int bi = offset * (2 * threadID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    // []
    _ScannedInstancePredicates[2 * tID] = temp[2 * threadID]; // store to main memory
    _ScannedInstancePredicates[2 * tID + 1] = temp[2 * threadID + 1];
}