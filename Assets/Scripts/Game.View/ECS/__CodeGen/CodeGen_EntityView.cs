
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by GamesTan.Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepECS                                         
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using System.Runtime.InteropServices;                                                            
using System;                                                                                    
using System.Collections.Generic;                                                                
using System.Collections;                                                                        
using System.Runtime.CompilerServices;                                                           
using Lockstep.Game;                                                                             
using Lockstep.Math;                                                                             
using Unity.Burst;                                                                               
using Unity.Mathematics;                                                                                                                                                                            
namespace GamesTan.ECS.Game {  
    using UnityEngine;
    public static unsafe class EntityViewUtil {
        public delegate BaseEntityView FuncOnBindView(Entity* ptr, int assetId, Transform3D* trans);

        public static BaseEntityView BindEntityView(Entity* ptr,int assetId, Transform3D* trans){
            var id = ptr->_ref._type;
            var func = _lutFuncOnBindView[id];
            if (func == null) {
                throw new IndexOutOfRangeException("TypeId out of Range:" + id);
            }
            return func(ptr, assetId, trans);
        }
        public static bool HasView(Entity* ptr){
            var id = ptr->_ref._type;
            return _lutFuncOnBindView[id] != null;
        }

        public static FuncOnBindView[] _lutFuncOnBindView = new FuncOnBindView[] {
            null,
            null,
            null,
            null,
            null,
            null,
            _OnBindEntityViewBullet,
            null,        
        };
        static BaseEntityView _OnBindEntityViewBullet(Entity* ptr,int assetId, Transform3D* trans){
            GameObject go = null;
            if (assetId != 0) {
                go= ResourcesService.Instance.Instantiate(assetId, trans->Position.ToVector3(), trans->Rotation.ToVector3());
            }

            if (go == null) {            
                go = new GameObject();  
                go.transform.SetPositionAndRotation(trans->Position.ToVector3(),Quaternion.Euler(trans->Rotation.ToVector3()));
            }
            go.name = ptr->_localId + "Bullet";
            var comp = go.AddComponent<EntityViewBullet>();
            return comp;
        }    
    }


    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial class EntityViewBullet :EntityView {
        public static EntityViewBullet Instance=>_Instance;
        private static EntityViewBullet _Instance;
        [SerializeField] public Bullet _cloneEntity;
        private Bullet* _ptr;

        public override void DoUpdate(float deltaTime){
            _cloneEntity = *_ptr; 
            UpdatePosRot(ref _cloneEntity.TransformData);
        }

        public override void BindEntity(Entity* entityPtr){
            if(entityPtr == null)  throw new Exception("BindViewError: EntityPtr should not be null");
            _ptr = (Bullet*)entityPtr;
            _cloneEntity = *_ptr;
            _Instance = this;
        }
        //protected override void UnbindEntity(){}
        public override void RebindEntity(Entity* newEntityPtr){}
    }  
}                                                                                                                                                                                                                                                                                     