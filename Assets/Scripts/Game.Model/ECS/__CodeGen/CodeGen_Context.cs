
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by GamesTan.Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepECS                                         
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using System.Runtime.InteropServices;                                                            
using System;                                                                                    
using System.Collections.Generic;                                                                
using System.Collections;                                                                        
using System.Runtime.CompilerServices;                                                           
using Lockstep.Game;                                                                             
using Lockstep.Math;                                                                             
using Unity.Burst;                                                                               
using Unity.Mathematics;                                                                                                                                                                            
namespace GamesTan.ECS.Game {  
    using Lockstep.Game;    
    using NetMsg.Common;

    public unsafe partial class TempFields {
        private Context _context;
        public Dictionary<int, InputCmd> InputCmds = new Dictionary<int, InputCmd>();

        public TempFields(Context context){
            this._context = context;
        }
    }

    public unsafe partial class Context : BaseContext {
        private static Context _instance;
        public static Context Instance {
            get => _instance ?? (_instance = new Context());
            set => _instance = value;
        }
        public bool HasInit = false;
        public TempFields TempFields{ get;private set;}

        public _EntityManager _entities = new _EntityManager();
        public IEntityService _entityService;
        private IServiceContainer _services;
        public T GetService<T>() where T : Lockstep.Game.IService{
            if (_services == null) return default(T);
            return _services.GetService<T>();
        }


    #region Rollback Implement
        private ClassBackupHelper<_EntityManager> _entitiesBackuper = new ClassBackupHelper<_EntityManager>();

        protected override void _DoBackup(int tick){
            _entitiesBackuper.Backup(tick, _entities.Clone());
        }

        protected override void _DoRollbackTo(int tick, int missFrameTick, bool isNeedClear){
            var clone = _entitiesBackuper.RollbackTo(tick, missFrameTick, isNeedClear);
            clone.CopyTo(_entities);
        }

        protected override void _DoCleanUselessSnapshot(int checkedTick){
            _entitiesBackuper.CleanUselessSnapshot(checkedTick,(es)=>es.Free());
        }
    #endregion
    #region Lifecycle
        private FuncOnEntityCreated<PClassA> funcOnCreateEntityPClassA;
        private FuncOnEntityCreated<PClassA> funcResetEntityPClassA;
        private FuncOnEntityCreated<SubClassA> funcOnCreateEntitySubClassA;
        private FuncOnEntityCreated<SubClassA> funcResetEntitySubClassA;
        private FuncOnEntityCreated<SubClassB> funcOnCreateEntitySubClassB;
        private FuncOnEntityCreated<SubClassB> funcResetEntitySubClassB;
        private FuncOnEntityCreated<SubClassBC> funcOnCreateEntitySubClassBC;
        private FuncOnEntityCreated<SubClassBC> funcResetEntitySubClassBC;
        private FuncOnEntityCreated<Enemy> funcOnCreateEntityEnemy;
        private FuncOnEntityCreated<Enemy> funcResetEntityEnemy;
        private FuncOnEntityCreated<Bullet> funcOnCreateEntityBullet;
        private FuncOnEntityCreated<Bullet> funcResetEntityBullet;
        private FuncOnEntityCreated<BulletEmitter> funcOnCreateEntityBulletEmitter;
        private FuncOnEntityCreated<BulletEmitter> funcResetEntityBulletEmitter; 
 

        protected override void _DoAwake(IServiceContainer services){            
            RegisterSystemFunctions();
            TempFields = new TempFields(this);
            OnAwake(this,services);
            _entities.Alloc();
            _services = services;
            // reduce gc
            funcOnCreateEntityPClassA = OnEntityCreatedPClassA;
            funcResetEntityPClassA = ResetEntityPClassA;
            funcOnCreateEntitySubClassA = OnEntityCreatedSubClassA;
            funcResetEntitySubClassA = ResetEntitySubClassA;
            funcOnCreateEntitySubClassB = OnEntityCreatedSubClassB;
            funcResetEntitySubClassB = ResetEntitySubClassB;
            funcOnCreateEntitySubClassBC = OnEntityCreatedSubClassBC;
            funcResetEntitySubClassBC = ResetEntitySubClassBC;
            funcOnCreateEntityEnemy = OnEntityCreatedEnemy;
            funcResetEntityEnemy = ResetEntityEnemy;
            funcOnCreateEntityBullet = OnEntityCreatedBullet;
            funcResetEntityBullet = ResetEntityBullet;
            funcOnCreateEntityBulletEmitter = OnEntityCreatedBulletEmitter;
            funcResetEntityBulletEmitter = ResetEntityBulletEmitter; 
        }
        protected override void _DoDestroy(){
            //TempFields.OnDestroy();
            _entities.Free();
        }
        protected override void _BeforeSchedule(){
            //TempFields.FramePrepare();
        }
        protected override void _AfterSchedule(){
            //TempFields.FrameClearUp();
        }


        protected override void _DoDestroyEntity(EntityRef entityRef){
            DestroyEntityInternal(GetEntity(entityRef));
        }
        
        public Entity* GetEntity(int entityId) {
            if (_id2EntityRef.TryGetValue(entityId, out var entityRef)) {
                var ptr = GetEntity(entityRef);
                return ptr;
            }
            return null;
        }
        public Entity* GetEntity(EntityRef entityRef){
            switch (entityRef._type) {
                case EntityIds.PClassA: return (Entity*) GetPClassA(entityRef);
                case EntityIds.SubClassA: return (Entity*) GetSubClassA(entityRef);
                case EntityIds.SubClassB: return (Entity*) GetSubClassB(entityRef);
                case EntityIds.SubClassBC: return (Entity*) GetSubClassBC(entityRef);
                case EntityIds.Enemy: return (Entity*) GetEnemy(entityRef);
                case EntityIds.Bullet: return (Entity*) GetBullet(entityRef);
                case EntityIds.BulletEmitter: return (Entity*) GetBulletEmitter(entityRef); 
            }
            return null;
        }

        private void DestroyEntityInternal(Entity* entity){
            if (entity == null) {
                return;
            }

            if (entity->_active == false) {
                return;
            }

            switch (entity->_ref._type) {
                case EntityIds.PClassA:
                    DestroyPClassAInternal((PClassA*) entity);
                    break;
                case EntityIds.SubClassA:
                    DestroySubClassAInternal((SubClassA*) entity);
                    break;
                case EntityIds.SubClassB:
                    DestroySubClassBInternal((SubClassB*) entity);
                    break;
                case EntityIds.SubClassBC:
                    DestroySubClassBCInternal((SubClassBC*) entity);
                    break;
                case EntityIds.Enemy:
                    DestroyEnemyInternal((Enemy*) entity);
                    break;
                case EntityIds.Bullet:
                    DestroyBulletInternal((Bullet*) entity);
                    break;
                case EntityIds.BulletEmitter:
                    DestroyBulletEmitterInternal((BulletEmitter*) entity);
                    break; 
            }
        }
  
        private unsafe void PostUpdateCreatePClassA(){
            _entities._PClassAAry.PostUpdateCreate(funcOnCreateEntityPClassA,funcResetEntityPClassA);
        }
        private unsafe void PostUpdateCreateSubClassA(){
            _entities._SubClassAAry.PostUpdateCreate(funcOnCreateEntitySubClassA,funcResetEntitySubClassA);
        }
        private unsafe void PostUpdateCreateSubClassB(){
            _entities._SubClassBAry.PostUpdateCreate(funcOnCreateEntitySubClassB,funcResetEntitySubClassB);
        }
        private unsafe void PostUpdateCreateSubClassBC(){
            _entities._SubClassBCAry.PostUpdateCreate(funcOnCreateEntitySubClassBC,funcResetEntitySubClassBC);
        }
        private unsafe void PostUpdateCreateEnemy(){
            _entities._EnemyAry.PostUpdateCreate(funcOnCreateEntityEnemy,funcResetEntityEnemy);
        }
        private unsafe void PostUpdateCreateBullet(){
            _entities._BulletAry.PostUpdateCreate(funcOnCreateEntityBullet,funcResetEntityBullet);
        }
        private unsafe void PostUpdateCreateBulletEmitter(){
            _entities._BulletEmitterAry.PostUpdateCreate(funcOnCreateEntityBulletEmitter,funcResetEntityBulletEmitter);
        } 

    #endregion
    #region Entity PClassA
        private void OnEntityCreatedPClassA(PClassA* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnPClassACreated(this, dstPtr);
        }

        private void ResetEntityPClassA(PClassA* dstPtr){
            *dstPtr = _DefaultDefine.PClassA;
        }
        public Boolean PClassAExists(EntityRef entityRef){
            return GetPClassA(entityRef) != null;
        }

        public PClassA* PostCmdCreatePClassA(){
            return _entities.CreateTempPClassA(this);
        }

        private void DestroyPClassAInternal(PClassA* ptr){
            _entities._PClassAAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnPClassADestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.PClassA;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroyPClassA(PClassA* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyPClassA(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion
    #region Entity SubClassA
        private void OnEntityCreatedSubClassA(SubClassA* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnSubClassACreated(this, dstPtr);
        }

        private void ResetEntitySubClassA(SubClassA* dstPtr){
            *dstPtr = _DefaultDefine.SubClassA;
        }
        public Boolean SubClassAExists(EntityRef entityRef){
            return GetSubClassA(entityRef) != null;
        }

        public SubClassA* PostCmdCreateSubClassA(){
            return _entities.CreateTempSubClassA(this);
        }

        private void DestroySubClassAInternal(SubClassA* ptr){
            _entities._SubClassAAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnSubClassADestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.SubClassA;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroySubClassA(SubClassA* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroySubClassA(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion
    #region Entity SubClassB
        private void OnEntityCreatedSubClassB(SubClassB* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnSubClassBCreated(this, dstPtr);
        }

        private void ResetEntitySubClassB(SubClassB* dstPtr){
            *dstPtr = _DefaultDefine.SubClassB;
        }
        public Boolean SubClassBExists(EntityRef entityRef){
            return GetSubClassB(entityRef) != null;
        }

        public SubClassB* PostCmdCreateSubClassB(){
            return _entities.CreateTempSubClassB(this);
        }

        private void DestroySubClassBInternal(SubClassB* ptr){
            _entities._SubClassBAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnSubClassBDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.SubClassB;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroySubClassB(SubClassB* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroySubClassB(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion
    #region Entity SubClassBC
        private void OnEntityCreatedSubClassBC(SubClassBC* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnSubClassBCCreated(this, dstPtr);
        }

        private void ResetEntitySubClassBC(SubClassBC* dstPtr){
            *dstPtr = _DefaultDefine.SubClassBC;
        }
        public Boolean SubClassBCExists(EntityRef entityRef){
            return GetSubClassBC(entityRef) != null;
        }

        public SubClassBC* PostCmdCreateSubClassBC(){
            return _entities.CreateTempSubClassBC(this);
        }

        private void DestroySubClassBCInternal(SubClassBC* ptr){
            _entities._SubClassBCAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnSubClassBCDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.SubClassBC;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroySubClassBC(SubClassBC* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroySubClassBC(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion
    #region Entity Enemy
        private void OnEntityCreatedEnemy(Enemy* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnEnemyCreated(this, dstPtr);
        }

        private void ResetEntityEnemy(Enemy* dstPtr){
            *dstPtr = _DefaultDefine.Enemy;
        }
        public Boolean EnemyExists(EntityRef entityRef){
            return GetEnemy(entityRef) != null;
        }

        public Enemy* PostCmdCreateEnemy(){
            return _entities.CreateTempEnemy(this);
        }

        private void DestroyEnemyInternal(Enemy* ptr){
            _entities._EnemyAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnEnemyDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.Enemy;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroyEnemy(Enemy* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyEnemy(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion
    #region Entity Bullet
        private void OnEntityCreatedBullet(Bullet* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBulletCreated(this, dstPtr);
        }

        private void ResetEntityBullet(Bullet* dstPtr){
            *dstPtr = _DefaultDefine.Bullet;
        }
        public Boolean BulletExists(EntityRef entityRef){
            return GetBullet(entityRef) != null;
        }

        public Bullet* PostCmdCreateBullet(){
            return _entities.CreateTempBullet(this);
        }

        private void DestroyBulletInternal(Bullet* ptr){
            _entities._BulletAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBulletDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.Bullet;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroyBullet(Bullet* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBullet(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion
    #region Entity BulletEmitter
        private void OnEntityCreatedBulletEmitter(BulletEmitter* dstPtr){
            _EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBulletEmitterCreated(this, dstPtr);
        }

        private void ResetEntityBulletEmitter(BulletEmitter* dstPtr){
            *dstPtr = _DefaultDefine.BulletEmitter;
        }
        public Boolean BulletEmitterExists(EntityRef entityRef){
            return GetBulletEmitter(entityRef) != null;
        }

        public BulletEmitter* PostCmdCreateBulletEmitter(){
            return _entities.CreateTempBulletEmitter(this);
        }

        private void DestroyBulletEmitterInternal(BulletEmitter* ptr){
            _entities._BulletEmitterAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBulletEmitterDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = _DefaultDefine.BulletEmitter;
            ptr->_entity = copy;
            _EntityDestroy(&ptr->_entity);
        }

        public void DestroyBulletEmitter(BulletEmitter* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBulletEmitter(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }
    #endregion 

    #region GetEntity
        private PClassAIterator GetAllPClassA(){
            return new PClassAIterator(_entities.GetPClassA(0),_entities.MaxPClassAIndex + 1);
        }
        private SubClassAIterator GetAllSubClassA(){
            return new SubClassAIterator(_entities.GetSubClassA(0),_entities.MaxSubClassAIndex + 1);
        }
        private SubClassBIterator GetAllSubClassB(){
            return new SubClassBIterator(_entities.GetSubClassB(0),_entities.MaxSubClassBIndex + 1);
        }
        private SubClassBCIterator GetAllSubClassBC(){
            return new SubClassBCIterator(_entities.GetSubClassBC(0),_entities.MaxSubClassBCIndex + 1);
        }
        private EnemyIterator GetAllEnemy(){
            return new EnemyIterator(_entities.GetEnemy(0),_entities.MaxEnemyIndex + 1);
        }
        private BulletIterator GetAllBullet(){
            return new BulletIterator(_entities.GetBullet(0),_entities.MaxBulletIndex + 1);
        }
        private BulletEmitterIterator GetAllBulletEmitter(){
            return new BulletEmitterIterator(_entities.GetBulletEmitter(0),_entities.MaxBulletEmitterIndex + 1);
        } 

        private EntityFilter[] GetAllEntities(){
            var all = new EntityFilter[_entities.CurTotalEntityCount];
            var count = 0;
            {
                var ptr = _entities.GetPClassA(0);
                var len = _entities._PClassAAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetSubClassA(0);
                var len = _entities._SubClassAAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetSubClassB(0);
                var len = _entities._SubClassBAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetSubClassBC(0);
                var len = _entities._SubClassBCAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetEnemy(0);
                var len = _entities._EnemyAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBullet(0);
                var len = _entities._BulletAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBulletEmitter(0);
                var len = _entities._BulletEmitterAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            } 
            return all;
        }
    #endregion
#if false // TODO fixed buildin components
    #region GetBuildInComponet
        public unsafe Buffer<MeshRenderDataFilter> GetAllMeshRenderData()
        {
            Buffer<MeshRenderDataFilter> buffer = Buffer<MeshRenderDataFilter>.Alloc(_entities.CurTotalEntityCount);
            Bullet* BulletPtr = this._entities.GetBullet(0);
            var idxBullet = 1;
            while (idxBullet >= 0)
            {
                if (BulletPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletPtr->_entity;
                  buffer.Items[buffer.Count].MeshRenderData = &BulletPtr->MeshRenderData;
                  ++buffer.Count;
                }
                --idxBullet;
                ++BulletPtr;
            }
            BulletEmitter* BulletEmitterPtr = this._entities.GetBulletEmitter(0);
            var idxBulletEmitter = 1;
            while (idxBulletEmitter >= 0)
            {
                if (BulletEmitterPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletEmitterPtr->_entity;
                  buffer.Items[buffer.Count].MeshRenderData = &BulletEmitterPtr->MeshRenderData;
                  ++buffer.Count;
                }
                --idxBulletEmitter;
                ++BulletEmitterPtr;
            } 
            return buffer;
        }
        public unsafe Buffer<AnimRenderDataFilter> GetAllAnimRenderData()
        {
            Buffer<AnimRenderDataFilter> buffer = Buffer<AnimRenderDataFilter>.Alloc(_entities.CurTotalEntityCount);
            Enemy* EnemyPtr = this._entities.GetEnemy(0);
            var idxEnemy = 1;
            while (idxEnemy >= 0)
            {
                if (EnemyPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &EnemyPtr->_entity;
                  buffer.Items[buffer.Count].AnimRenderData = &EnemyPtr->AnimRenderData;
                  ++buffer.Count;
                }
                --idxEnemy;
                ++EnemyPtr;
            } 
            return buffer;
        }
        public unsafe Buffer<PhysicDataFilter> GetAllPhysicData()
        {
            Buffer<PhysicDataFilter> buffer = Buffer<PhysicDataFilter>.Alloc(_entities.CurTotalEntityCount);
            PClassA* PClassAPtr = this._entities.GetPClassA(0);
            var idxPClassA = 1;
            while (idxPClassA >= 0)
            {
                if (PClassAPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &PClassAPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &PClassAPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxPClassA;
                ++PClassAPtr;
            }
            SubClassA* SubClassAPtr = this._entities.GetSubClassA(0);
            var idxSubClassA = 1;
            while (idxSubClassA >= 0)
            {
                if (SubClassAPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassAPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &SubClassAPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxSubClassA;
                ++SubClassAPtr;
            }
            SubClassB* SubClassBPtr = this._entities.GetSubClassB(0);
            var idxSubClassB = 1;
            while (idxSubClassB >= 0)
            {
                if (SubClassBPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassBPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &SubClassBPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxSubClassB;
                ++SubClassBPtr;
            }
            SubClassBC* SubClassBCPtr = this._entities.GetSubClassBC(0);
            var idxSubClassBC = 1;
            while (idxSubClassBC >= 0)
            {
                if (SubClassBCPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassBCPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &SubClassBCPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxSubClassBC;
                ++SubClassBCPtr;
            }
            Enemy* EnemyPtr = this._entities.GetEnemy(0);
            var idxEnemy = 1;
            while (idxEnemy >= 0)
            {
                if (EnemyPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &EnemyPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &EnemyPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxEnemy;
                ++EnemyPtr;
            }
            Bullet* BulletPtr = this._entities.GetBullet(0);
            var idxBullet = 1;
            while (idxBullet >= 0)
            {
                if (BulletPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &BulletPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxBullet;
                ++BulletPtr;
            }
            BulletEmitter* BulletEmitterPtr = this._entities.GetBulletEmitter(0);
            var idxBulletEmitter = 1;
            while (idxBulletEmitter >= 0)
            {
                if (BulletEmitterPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletEmitterPtr->_entity;
                  buffer.Items[buffer.Count].PhysicData = &BulletEmitterPtr->PhysicData;
                  ++buffer.Count;
                }
                --idxBulletEmitter;
                ++BulletEmitterPtr;
            } 
            return buffer;
        }
        public unsafe Buffer<BasicDataFilter> GetAllBasicData()
        {
            Buffer<BasicDataFilter> buffer = Buffer<BasicDataFilter>.Alloc(_entities.CurTotalEntityCount);
            PClassA* PClassAPtr = this._entities.GetPClassA(0);
            var idxPClassA = 1;
            while (idxPClassA >= 0)
            {
                if (PClassAPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &PClassAPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &PClassAPtr->BasicData;
                  ++buffer.Count;
                }
                --idxPClassA;
                ++PClassAPtr;
            }
            SubClassA* SubClassAPtr = this._entities.GetSubClassA(0);
            var idxSubClassA = 1;
            while (idxSubClassA >= 0)
            {
                if (SubClassAPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassAPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &SubClassAPtr->BasicData;
                  ++buffer.Count;
                }
                --idxSubClassA;
                ++SubClassAPtr;
            }
            SubClassB* SubClassBPtr = this._entities.GetSubClassB(0);
            var idxSubClassB = 1;
            while (idxSubClassB >= 0)
            {
                if (SubClassBPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassBPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &SubClassBPtr->BasicData;
                  ++buffer.Count;
                }
                --idxSubClassB;
                ++SubClassBPtr;
            }
            SubClassBC* SubClassBCPtr = this._entities.GetSubClassBC(0);
            var idxSubClassBC = 1;
            while (idxSubClassBC >= 0)
            {
                if (SubClassBCPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassBCPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &SubClassBCPtr->BasicData;
                  ++buffer.Count;
                }
                --idxSubClassBC;
                ++SubClassBCPtr;
            }
            Enemy* EnemyPtr = this._entities.GetEnemy(0);
            var idxEnemy = 1;
            while (idxEnemy >= 0)
            {
                if (EnemyPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &EnemyPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &EnemyPtr->BasicData;
                  ++buffer.Count;
                }
                --idxEnemy;
                ++EnemyPtr;
            }
            Bullet* BulletPtr = this._entities.GetBullet(0);
            var idxBullet = 1;
            while (idxBullet >= 0)
            {
                if (BulletPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &BulletPtr->BasicData;
                  ++buffer.Count;
                }
                --idxBullet;
                ++BulletPtr;
            }
            BulletEmitter* BulletEmitterPtr = this._entities.GetBulletEmitter(0);
            var idxBulletEmitter = 1;
            while (idxBulletEmitter >= 0)
            {
                if (BulletEmitterPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletEmitterPtr->_entity;
                  buffer.Items[buffer.Count].BasicData = &BulletEmitterPtr->BasicData;
                  ++buffer.Count;
                }
                --idxBulletEmitter;
                ++BulletEmitterPtr;
            } 
            return buffer;
        }
        public unsafe Buffer<AnimatorFilter> GetAllAnimator()
        {
            Buffer<AnimatorFilter> buffer = Buffer<AnimatorFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<CollisionAgentFilter> GetAllCollisionAgent()
        {
            Buffer<CollisionAgentFilter> buffer = Buffer<CollisionAgentFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<NavMeshAgentFilter> GetAllNavMeshAgent()
        {
            Buffer<NavMeshAgentFilter> buffer = Buffer<NavMeshAgentFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<AssetDataFilter> GetAllAssetData()
        {
            Buffer<AssetDataFilter> buffer = Buffer<AssetDataFilter>.Alloc(_entities.CurTotalEntityCount);
            PClassA* PClassAPtr = this._entities.GetPClassA(0);
            var idxPClassA = 1;
            while (idxPClassA >= 0)
            {
                if (PClassAPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &PClassAPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &PClassAPtr->AssetData;
                  ++buffer.Count;
                }
                --idxPClassA;
                ++PClassAPtr;
            }
            SubClassA* SubClassAPtr = this._entities.GetSubClassA(0);
            var idxSubClassA = 1;
            while (idxSubClassA >= 0)
            {
                if (SubClassAPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassAPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &SubClassAPtr->AssetData;
                  ++buffer.Count;
                }
                --idxSubClassA;
                ++SubClassAPtr;
            }
            SubClassB* SubClassBPtr = this._entities.GetSubClassB(0);
            var idxSubClassB = 1;
            while (idxSubClassB >= 0)
            {
                if (SubClassBPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassBPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &SubClassBPtr->AssetData;
                  ++buffer.Count;
                }
                --idxSubClassB;
                ++SubClassBPtr;
            }
            SubClassBC* SubClassBCPtr = this._entities.GetSubClassBC(0);
            var idxSubClassBC = 1;
            while (idxSubClassBC >= 0)
            {
                if (SubClassBCPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &SubClassBCPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &SubClassBCPtr->AssetData;
                  ++buffer.Count;
                }
                --idxSubClassBC;
                ++SubClassBCPtr;
            }
            Enemy* EnemyPtr = this._entities.GetEnemy(0);
            var idxEnemy = 1;
            while (idxEnemy >= 0)
            {
                if (EnemyPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &EnemyPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &EnemyPtr->AssetData;
                  ++buffer.Count;
                }
                --idxEnemy;
                ++EnemyPtr;
            }
            Bullet* BulletPtr = this._entities.GetBullet(0);
            var idxBullet = 1;
            while (idxBullet >= 0)
            {
                if (BulletPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &BulletPtr->AssetData;
                  ++buffer.Count;
                }
                --idxBullet;
                ++BulletPtr;
            }
            BulletEmitter* BulletEmitterPtr = this._entities.GetBulletEmitter(0);
            var idxBulletEmitter = 1;
            while (idxBulletEmitter >= 0)
            {
                if (BulletEmitterPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletEmitterPtr->_entity;
                  buffer.Items[buffer.Count].AssetData = &BulletEmitterPtr->AssetData;
                  ++buffer.Count;
                }
                --idxBulletEmitter;
                ++BulletEmitterPtr;
            } 
            return buffer;
        }
        public unsafe Buffer<Transform2DFilter> GetAllTransform2D()
        {
            Buffer<Transform2DFilter> buffer = Buffer<Transform2DFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<Transform3DFilter> GetAllTransform3D()
        {
            Buffer<Transform3DFilter> buffer = Buffer<Transform3DFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        } 
    #endregion
#endif

    }
}                                                                                                                                                                                                                                                                                     