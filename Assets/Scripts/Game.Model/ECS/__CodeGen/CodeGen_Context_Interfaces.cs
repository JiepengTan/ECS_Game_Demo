
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by GamesTan.Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepECS                                         
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using System.Runtime.InteropServices;                                                            
using System;                                                                                    
using System.Collections.Generic;                                                                
using System.Collections;                                                                        
using System.Runtime.CompilerServices;                                                           
using Lockstep.Game;                                                                             
using Lockstep.Math;                                                                             
using Unity.Burst;                                                                               
using Unity.Mathematics;                                                                                                                                                                            
namespace GamesTan.ECS.Game {  
    using Lockstep.Game;
    public unsafe partial class Context : BaseContext {
        public int CurTotalEntityCount => _entities.CurTotalEntityCount;
        public int CurPClassACount => _entities.CurPClassACount;
        public int MaxPClassAIndex => _entities.MaxPClassAIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe PClassA* GetPClassA(int entityId) { 
            var ptr = GetEntity(entityId);
            if (ptr == null) return null;
            if (ptr->TypeId != EntityIds.PClassA) return null;
            return (PClassA*)ptr;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe PClassA* GetPClassAInternalByIdx(int index) { return _entities.GetPClassA(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe PClassA* GetPClassA(EntityRef entityRef) {  return _entities.GetPClassA(entityRef); }
        public int CurSubClassACount => _entities.CurSubClassACount;
        public int MaxSubClassAIndex => _entities.MaxSubClassAIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe SubClassA* GetSubClassA(int entityId) { 
            var ptr = GetEntity(entityId);
            if (ptr == null) return null;
            if (ptr->TypeId != EntityIds.SubClassA) return null;
            return (SubClassA*)ptr;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe SubClassA* GetSubClassAInternalByIdx(int index) { return _entities.GetSubClassA(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe SubClassA* GetSubClassA(EntityRef entityRef) {  return _entities.GetSubClassA(entityRef); }
        public int CurSubClassBCount => _entities.CurSubClassBCount;
        public int MaxSubClassBIndex => _entities.MaxSubClassBIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe SubClassB* GetSubClassB(int entityId) { 
            var ptr = GetEntity(entityId);
            if (ptr == null) return null;
            if (ptr->TypeId != EntityIds.SubClassB) return null;
            return (SubClassB*)ptr;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe SubClassB* GetSubClassBInternalByIdx(int index) { return _entities.GetSubClassB(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe SubClassB* GetSubClassB(EntityRef entityRef) {  return _entities.GetSubClassB(entityRef); }
        public int CurEnemyCount => _entities.CurEnemyCount;
        public int MaxEnemyIndex => _entities.MaxEnemyIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Enemy* GetEnemy(int entityId) { 
            var ptr = GetEntity(entityId);
            if (ptr == null) return null;
            if (ptr->TypeId != EntityIds.Enemy) return null;
            return (Enemy*)ptr;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Enemy* GetEnemyInternalByIdx(int index) { return _entities.GetEnemy(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Enemy* GetEnemy(EntityRef entityRef) {  return _entities.GetEnemy(entityRef); }
        public int CurBulletCount => _entities.CurBulletCount;
        public int MaxBulletIndex => _entities.MaxBulletIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Bullet* GetBullet(int entityId) { 
            var ptr = GetEntity(entityId);
            if (ptr == null) return null;
            if (ptr->TypeId != EntityIds.Bullet) return null;
            return (Bullet*)ptr;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Bullet* GetBulletInternalByIdx(int index) { return _entities.GetBullet(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Bullet* GetBullet(EntityRef entityRef) {  return _entities.GetBullet(entityRef); }
        public int CurBulletEmitterCount => _entities.CurBulletEmitterCount;
        public int MaxBulletEmitterIndex => _entities.MaxBulletEmitterIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BulletEmitter* GetBulletEmitter(int entityId) { 
            var ptr = GetEntity(entityId);
            if (ptr == null) return null;
            if (ptr->TypeId != EntityIds.BulletEmitter) return null;
            return (BulletEmitter*)ptr;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BulletEmitter* GetBulletEmitterInternalByIdx(int index) { return _entities.GetBulletEmitter(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BulletEmitter* GetBulletEmitter(EntityRef entityRef) {  return _entities.GetBulletEmitter(entityRef); } 

    #region GetComponetFilter
        public void GetAllPClassA_AssetData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<PClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._PClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AssetData); } });
        }
        public void GetAllPClassA_TransformData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<PClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._PClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->TransformData); } });
        }
        public void GetAllPClassA_BasicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BasicData> compArray, FuncEntityFilter<PClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._PClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BasicData); } });
        }
        public void GetAllPClassA_PhysicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PhysicData> compArray, FuncEntityFilter<PClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._PClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->PhysicData); } });
        }
        public void GetAllPClassA_Val1(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<int> compArray, FuncEntityFilter<PClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._PClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Val1); } });
        } 
        public void GetAllSubClassA_AssetData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<SubClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AssetData); } });
        }
        public void GetAllSubClassA_TransformData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<SubClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->TransformData); } });
        }
        public void GetAllSubClassA_BasicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BasicData> compArray, FuncEntityFilter<SubClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BasicData); } });
        }
        public void GetAllSubClassA_PhysicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PhysicData> compArray, FuncEntityFilter<SubClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->PhysicData); } });
        }
        public void GetAllSubClassA_Val1(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<int> compArray, FuncEntityFilter<SubClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Val1); } });
        }
        public void GetAllSubClassA_Val2(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<float> compArray, FuncEntityFilter<SubClassA> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassAAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Val2); } });
        } 
        public void GetAllSubClassB_AssetData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<SubClassB> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassBAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AssetData); } });
        }
        public void GetAllSubClassB_TransformData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<SubClassB> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassBAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->TransformData); } });
        }
        public void GetAllSubClassB_BasicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BasicData> compArray, FuncEntityFilter<SubClassB> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassBAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BasicData); } });
        }
        public void GetAllSubClassB_PhysicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PhysicData> compArray, FuncEntityFilter<SubClassB> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassBAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->PhysicData); } });
        }
        public void GetAllSubClassB_Val1(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<int> compArray, FuncEntityFilter<SubClassB> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassBAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Val1); } });
        }
        public void GetAllSubClassB_Val3(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<long> compArray, FuncEntityFilter<SubClassB> filterFunc){
            _FilterEntity(allocatorType,_entities._SubClassBAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Val3); } });
        } 
        public void GetAllEnemy_AssetData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AssetData); } });
        }
        public void GetAllEnemy_TransformData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->TransformData); } });
        }
        public void GetAllEnemy_BasicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BasicData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BasicData); } });
        }
        public void GetAllEnemy_PhysicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PhysicData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->PhysicData); } });
        }
        public void GetAllEnemy_EnemyTag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<EnemyTag> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->EnemyTag); } });
        }
        public void GetAllEnemy_UnitData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<UnitData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->UnitData); } });
        }
        public void GetAllEnemy_AIData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AIData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AIData); } });
        }
        public void GetAllEnemy_AnimRenderData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AnimRenderData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AnimRenderData); } });
        }
        public void GetAllEnemy_AnimData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AnimData> compArray, FuncEntityFilter<Enemy> filterFunc){
            _FilterEntity(allocatorType,_entities._EnemyAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AnimData); } });
        } 
        public void GetAllBullet_AssetData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AssetData); } });
        }
        public void GetAllBullet_TransformData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->TransformData); } });
        }
        public void GetAllBullet_BasicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BasicData> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BasicData); } });
        }
        public void GetAllBullet_PhysicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PhysicData> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->PhysicData); } });
        }
        public void GetAllBullet_BulletTag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BulletTag> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BulletTag); } });
        }
        public void GetAllBullet_MeshRenderData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<MeshRenderData> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->MeshRenderData); } });
        }
        public void GetAllBullet_UnitData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<UnitData> compArray, FuncEntityFilter<Bullet> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->UnitData); } });
        } 
        public void GetAllBulletEmitter_AssetData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->AssetData); } });
        }
        public void GetAllBulletEmitter_TransformData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->TransformData); } });
        }
        public void GetAllBulletEmitter_BasicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BasicData> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BasicData); } });
        }
        public void GetAllBulletEmitter_PhysicData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PhysicData> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->PhysicData); } });
        }
        public void GetAllBulletEmitter_SpawnerTag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<SpawnerTag> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->SpawnerTag); } });
        }
        public void GetAllBulletEmitter_MeshRenderData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<MeshRenderData> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->MeshRenderData); } });
        }
        public void GetAllBulletEmitter_EmitterData(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<EmitterData> compArray, FuncEntityFilter<BulletEmitter> filterFunc){
            _FilterEntity(allocatorType,_entities._BulletEmitterAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->EmitterData); } });
        }   
        public NativeArray<MeshRenderData> GetAllMeshRenderData(EAllocatorType allocatorType,E_EntityOfMeshRenderData entity){ var val = _entities.GetAllMeshRenderData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<MeshRenderData> GetAllMeshRenderData(EAllocatorType allocatorType,E_EntityOfMeshRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMeshRenderData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<AnimRenderData> GetAllAnimRenderData(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity){ var val = _entities.GetAllAnimRenderData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<AnimRenderData> GetAllAnimRenderData(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimRenderData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<PhysicData> GetAllPhysicData(EAllocatorType allocatorType,E_EntityOfPhysicData entity){ var val = _entities.GetAllPhysicData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<PhysicData> GetAllPhysicData(EAllocatorType allocatorType,E_EntityOfPhysicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPhysicData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BasicData> GetAllBasicData(EAllocatorType allocatorType,E_EntityOfBasicData entity){ var val = _entities.GetAllBasicData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BasicData> GetAllBasicData(EAllocatorType allocatorType,E_EntityOfBasicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBasicData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<EnemyTag> GetAllEnemyTag(EAllocatorType allocatorType,E_EntityOfEnemyTag entity){ var val = _entities.GetAllEnemyTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<EnemyTag> GetAllEnemyTag(EAllocatorType allocatorType,E_EntityOfEnemyTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEnemyTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BulletTag> GetAllBulletTag(EAllocatorType allocatorType,E_EntityOfBulletTag entity){ var val = _entities.GetAllBulletTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BulletTag> GetAllBulletTag(EAllocatorType allocatorType,E_EntityOfBulletTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBulletTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<SpawnerTag> GetAllSpawnerTag(EAllocatorType allocatorType,E_EntityOfSpawnerTag entity){ var val = _entities.GetAllSpawnerTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<SpawnerTag> GetAllSpawnerTag(EAllocatorType allocatorType,E_EntityOfSpawnerTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSpawnerTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<UnitData> GetAllUnitData(EAllocatorType allocatorType,E_EntityOfUnitData entity){ var val = _entities.GetAllUnitData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<UnitData> GetAllUnitData(EAllocatorType allocatorType,E_EntityOfUnitData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllUnitData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<EmitterData> GetAllEmitterData(EAllocatorType allocatorType,E_EntityOfEmitterData entity){ var val = _entities.GetAllEmitterData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<EmitterData> GetAllEmitterData(EAllocatorType allocatorType,E_EntityOfEmitterData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEmitterData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<AIData> GetAllAIData(EAllocatorType allocatorType,E_EntityOfAIData entity){ var val = _entities.GetAllAIData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<AIData> GetAllAIData(EAllocatorType allocatorType,E_EntityOfAIData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAIData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<AnimData> GetAllAnimData(EAllocatorType allocatorType,E_EntityOfAnimData entity){ var val = _entities.GetAllAnimData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<AnimData> GetAllAnimData(EAllocatorType allocatorType,E_EntityOfAnimData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Animator> GetAllAnimator(EAllocatorType allocatorType,E_EntityOfAnimator entity){ var val = _entities.GetAllAnimator(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Animator> GetAllAnimator(EAllocatorType allocatorType,E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimator(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<CollisionAgent> GetAllCollisionAgent(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){ var val = _entities.GetAllCollisionAgent(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<CollisionAgent> GetAllCollisionAgent(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<NavMeshAgent> GetAllNavMeshAgent(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity){ var val = _entities.GetAllNavMeshAgent(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<NavMeshAgent> GetAllNavMeshAgent(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllNavMeshAgent(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<AssetData> GetAllAssetData(EAllocatorType allocatorType,E_EntityOfAssetData entity){ var val = _entities.GetAllAssetData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<AssetData> GetAllAssetData(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Transform2D> GetAllTransform2D(EAllocatorType allocatorType,E_EntityOfTransform2D entity){ var val = _entities.GetAllTransform2D(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Transform2D> GetAllTransform2D(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Transform3D> GetAllTransform3D(EAllocatorType allocatorType,E_EntityOfTransform3D entity){ var val = _entities.GetAllTransform3D(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Transform3D> GetAllTransform3D(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}

        public NativeArray<int> GetAllMeshRenderData_Padding(EAllocatorType allocatorType,E_EntityOfMeshRenderData entity){var val = _entities.GetAllMeshRenderData_Padding(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllMeshRenderData_Padding(EAllocatorType allocatorType,E_EntityOfMeshRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMeshRenderData_Padding(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo0(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity){var val = _entities.GetAllAnimRenderData_AnimInfo0(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo0(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimRenderData_AnimInfo0(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo1(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity){var val = _entities.GetAllAnimRenderData_AnimInfo1(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo1(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimRenderData_AnimInfo1(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo2(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity){var val = _entities.GetAllAnimRenderData_AnimInfo2(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo2(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimRenderData_AnimInfo2(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo3(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity){var val = _entities.GetAllAnimRenderData_AnimInfo3(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimRenderData_AnimInfo3(EAllocatorType allocatorType,E_EntityOfAnimRenderData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimRenderData_AnimInfo3(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int2> GetAllPhysicData_GridCoord(EAllocatorType allocatorType,E_EntityOfPhysicData entity){var val = _entities.GetAllPhysicData_GridCoord(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int2> GetAllPhysicData_GridCoord(EAllocatorType allocatorType,E_EntityOfPhysicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPhysicData_GridCoord(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllPhysicData_Radius(EAllocatorType allocatorType,E_EntityOfPhysicData entity){var val = _entities.GetAllPhysicData_Radius(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllPhysicData_Radius(EAllocatorType allocatorType,E_EntityOfPhysicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPhysicData_Radius(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllPhysicData_Speed(EAllocatorType allocatorType,E_EntityOfPhysicData entity){var val = _entities.GetAllPhysicData_Speed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllPhysicData_Speed(EAllocatorType allocatorType,E_EntityOfPhysicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPhysicData_Speed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllPhysicData_RotateSpeed(EAllocatorType allocatorType,E_EntityOfPhysicData entity){var val = _entities.GetAllPhysicData_RotateSpeed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllPhysicData_RotateSpeed(EAllocatorType allocatorType,E_EntityOfPhysicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPhysicData_RotateSpeed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBasicData_GObjectId(EAllocatorType allocatorType,E_EntityOfBasicData entity){var val = _entities.GetAllBasicData_GObjectId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBasicData_GObjectId(EAllocatorType allocatorType,E_EntityOfBasicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBasicData_GObjectId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<Bitset32> GetAllBasicData_StatusData(EAllocatorType allocatorType,E_EntityOfBasicData entity){var val = _entities.GetAllBasicData_StatusData(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<Bitset32> GetAllBasicData_StatusData(EAllocatorType allocatorType,E_EntityOfBasicData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBasicData_StatusData(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllEnemyTag_Padding(EAllocatorType allocatorType,E_EntityOfEnemyTag entity){var val = _entities.GetAllEnemyTag_Padding(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllEnemyTag_Padding(EAllocatorType allocatorType,E_EntityOfEnemyTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEnemyTag_Padding(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBulletTag_Padding(EAllocatorType allocatorType,E_EntityOfBulletTag entity){var val = _entities.GetAllBulletTag_Padding(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBulletTag_Padding(EAllocatorType allocatorType,E_EntityOfBulletTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBulletTag_Padding(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllSpawnerTag_Padding(EAllocatorType allocatorType,E_EntityOfSpawnerTag entity){var val = _entities.GetAllSpawnerTag_Padding(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllSpawnerTag_Padding(EAllocatorType allocatorType,E_EntityOfSpawnerTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSpawnerTag_Padding(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllUnitData_Attack(EAllocatorType allocatorType,E_EntityOfUnitData entity){var val = _entities.GetAllUnitData_Attack(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllUnitData_Attack(EAllocatorType allocatorType,E_EntityOfUnitData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllUnitData_Attack(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllUnitData_Defence(EAllocatorType allocatorType,E_EntityOfUnitData entity){var val = _entities.GetAllUnitData_Defence(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllUnitData_Defence(EAllocatorType allocatorType,E_EntityOfUnitData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllUnitData_Defence(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllUnitData_Health(EAllocatorType allocatorType,E_EntityOfUnitData entity){var val = _entities.GetAllUnitData_Health(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllUnitData_Health(EAllocatorType allocatorType,E_EntityOfUnitData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllUnitData_Health(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllEmitterData_Deg(EAllocatorType allocatorType,E_EntityOfEmitterData entity){var val = _entities.GetAllEmitterData_Deg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllEmitterData_Deg(EAllocatorType allocatorType,E_EntityOfEmitterData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEmitterData_Deg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllEmitterData_Count(EAllocatorType allocatorType,E_EntityOfEmitterData entity){var val = _entities.GetAllEmitterData_Count(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllEmitterData_Count(EAllocatorType allocatorType,E_EntityOfEmitterData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEmitterData_Count(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllEmitterData_LiveTime(EAllocatorType allocatorType,E_EntityOfEmitterData entity){var val = _entities.GetAllEmitterData_LiveTime(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllEmitterData_LiveTime(EAllocatorType allocatorType,E_EntityOfEmitterData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEmitterData_LiveTime(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllEmitterData_Interval(EAllocatorType allocatorType,E_EntityOfEmitterData entity){var val = _entities.GetAllEmitterData_Interval(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllEmitterData_Interval(EAllocatorType allocatorType,E_EntityOfEmitterData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEmitterData_Interval(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllEmitterData_Timer(EAllocatorType allocatorType,E_EntityOfEmitterData entity){var val = _entities.GetAllEmitterData_Timer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllEmitterData_Timer(EAllocatorType allocatorType,E_EntityOfEmitterData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllEmitterData_Timer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_AITimer(EAllocatorType allocatorType,E_EntityOfAIData entity){var val = _entities.GetAllAIData_AITimer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_AITimer(EAllocatorType allocatorType,E_EntityOfAIData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAIData_AITimer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_TargetDeg(EAllocatorType allocatorType,E_EntityOfAIData entity){var val = _entities.GetAllAIData_TargetDeg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_TargetDeg(EAllocatorType allocatorType,E_EntityOfAIData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAIData_TargetDeg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_LerpInterval(EAllocatorType allocatorType,E_EntityOfAIData entity){var val = _entities.GetAllAIData_LerpInterval(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_LerpInterval(EAllocatorType allocatorType,E_EntityOfAIData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAIData_LerpInterval(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_LerpTimer(EAllocatorType allocatorType,E_EntityOfAIData entity){var val = _entities.GetAllAIData_LerpTimer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllAIData_LerpTimer(EAllocatorType allocatorType,E_EntityOfAIData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAIData_LerpTimer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimData_Timer(EAllocatorType allocatorType,E_EntityOfAnimData entity){var val = _entities.GetAllAnimData_Timer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimData_Timer(EAllocatorType allocatorType,E_EntityOfAnimData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimData_Timer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimData_LerpTimer(EAllocatorType allocatorType,E_EntityOfAnimData entity){var val = _entities.GetAllAnimData_LerpTimer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float4> GetAllAnimData_LerpTimer(EAllocatorType allocatorType,E_EntityOfAnimData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimData_LerpTimer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int4> GetAllAnimData_AnimId1(EAllocatorType allocatorType,E_EntityOfAnimData entity){var val = _entities.GetAllAnimData_AnimId1(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int4> GetAllAnimData_AnimId1(EAllocatorType allocatorType,E_EntityOfAnimData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimData_AnimId1(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int4> GetAllAnimData_AnimId2(EAllocatorType allocatorType,E_EntityOfAnimData entity){var val = _entities.GetAllAnimData_AnimId2(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int4> GetAllAnimData_AnimId2(EAllocatorType allocatorType,E_EntityOfAnimData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimData_AnimId2(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAnimator_Pad(EAllocatorType allocatorType,E_EntityOfAnimator entity){var val = _entities.GetAllAnimator_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAnimator_Pad(EAllocatorType allocatorType,E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimator_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<CollisionShape> GetAllCollisionAgent_Collider(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Collider(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<CollisionShape> GetAllCollisionAgent_Collider(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Collider(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsTrigger(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsTrigger(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsTrigger(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsTrigger(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCollisionAgent_Layer(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Layer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCollisionAgent_Layer(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Layer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsEnable(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsEnable(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsEnable(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsEnable(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsSleep(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsSleep(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsSleep(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsSleep(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllCollisionAgent_Mass(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Mass(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllCollisionAgent_Mass(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Mass(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllCollisionAgent_AngularSpeed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_AngularSpeed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllCollisionAgent_AngularSpeed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_AngularSpeed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllCollisionAgent_Speed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Speed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllCollisionAgent_Speed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Speed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllNavMeshAgent_Pad(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity){var val = _entities.GetAllNavMeshAgent_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllNavMeshAgent_Pad(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllNavMeshAgent_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_AssetId(EAllocatorType allocatorType,E_EntityOfAssetData entity){var val = _entities.GetAllAssetData_AssetId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_AssetId(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData_AssetId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_InstancePrefabIdx(EAllocatorType allocatorType,E_EntityOfAssetData entity){var val = _entities.GetAllAssetData_InstancePrefabIdx(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_InstancePrefabIdx(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData_InstancePrefabIdx(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float2> GetAllTransform2D_Position(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float2> GetAllTransform2D_Position(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllTransform2D_Deg(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Deg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllTransform2D_Deg(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Deg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllTransform2D_Scale(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Scale(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float> GetAllTransform2D_Scale(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Scale(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllTransform3D_Position(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllTransform3D_Position(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllTransform3D_Rotation(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Rotation(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllTransform3D_Rotation(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Rotation(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllTransform3D_Scale(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Scale(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<float3> GetAllTransform3D_Scale(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Scale(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
 
    #endregion

    }
}                                                                                                                                                                                                                                                                                     