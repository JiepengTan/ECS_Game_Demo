
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by GamesTan.Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepECS                                         
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using System.Runtime.InteropServices;                                                            
using System;                                                                                    
using System.Collections.Generic;                                                                
using System.Collections;                                                                        
using System.Runtime.CompilerServices;                                                           
using Lockstep.Game;                                                                             
using Lockstep.Math;                                                                             
using Unity.Burst;                                                                               
using Unity.Mathematics;                                                                                                                                                                            
namespace GamesTan.ECS.Game {  
    public unsafe partial class Context {
 
 
        
        private static void ScheduleSysTestUpdateSkinRender(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestUpdateSkinRender) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._EnemyAry.GetEntity(0);
                var len = entities._EnemyAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->AssetData, ref ptr->TransformData, ref ptr->AnimRenderData);
                        idx++;
                    }
                }
            }  
        }
        private static void ScheduleSysTestUpdateMeshRender(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestUpdateMeshRender) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BulletAry.GetEntity(0);
                var len = entities._BulletAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->AssetData, ref ptr->TransformData, ref ptr->MeshRenderData);
                        idx++;
                    }
                }
            }
            {
                var ptr = entities._BulletEmitterAry.GetEntity(0);
                var len = entities._BulletEmitterAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->AssetData, ref ptr->TransformData, ref ptr->MeshRenderData);
                        idx++;
                    }
                }
            }  
        } 
        //public override void Update(float dt) {
        //    var pool = EntityManager.EnemyPool;
        //    var count = pool.MaxUsedSlot;
        //    var ptrAry = pool.GetData();
        //    for (int i = 0; i < count; i++) {
        //        ref var entity =ref ptrAry[i];
        //        if (entity.IsValid) {
        //            Execute(ref entity, dt);
        //        }
        //    }
        //}
        private static void ScheduleSysTestEnemyAwake(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestEnemyAwake) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._EnemyAry.GetEntity(0);
                var len = entities._EnemyAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Enemy*) ptr);
                        idx++;
                    }
                }
            } 
        }
        private static void ScheduleSysTestEnemyUpdateAnimation(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestEnemyUpdateAnimation) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._EnemyAry.GetEntity(0);
                var len = entities._EnemyAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Enemy*) ptr);
                        idx++;
                    }
                }
            } 
        }
        private static void ScheduleSysTestEnemyUpdateAI(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestEnemyUpdateAI) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._EnemyAry.GetEntity(0);
                var len = entities._EnemyAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Enemy*) ptr);
                        idx++;
                    }
                }
            } 
        }
        private static void ScheduleSysTestBulletAwake(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestBulletAwake) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BulletAry.GetEntity(0);
                var len = entities._BulletAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Bullet*) ptr);
                        idx++;
                    }
                }
            } 
        }
        private static void ScheduleSysTestBulletUpdateCollision(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestBulletUpdateCollision) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BulletAry.GetEntity(0);
                var len = entities._BulletAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Bullet*) ptr);
                        idx++;
                    }
                }
            } 
        }
        private static void ScheduleSysTestBulletUpdatePos(BaseContext context, ISystem sys){
            var system = (GamesTan.ECS.Game.SysTestBulletUpdatePos) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BulletAry.GetEntity(0);
                var len = entities._BulletAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Bullet*) ptr);
                        idx++;
                    }
                }
            } 
        } 


    }


 


 
}                                                                                                                                                                                                                                                                                     