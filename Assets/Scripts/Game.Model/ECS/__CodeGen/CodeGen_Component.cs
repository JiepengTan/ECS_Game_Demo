
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by GamesTan.Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepECS                                         
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using System.Runtime.InteropServices;                                                            
using System;                                                                                    
using System.Collections.Generic;                                                                
using System.Collections;                                                                        
using System.Runtime.CompilerServices;                                                           
using Lockstep.Game;                                                                             
using Lockstep.Math;                                                                             
using Unity.Burst;                                                                               
using Unity.Mathematics;                                                                                                                                                                            
namespace GamesTan.ECS.Game {  

    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct EnemyTag {
        public int Padding; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Padding.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct BulletTag {
        public int Padding; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Padding.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct SpawnerTag {
        public int Padding; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Padding.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct UnitData {
        public int Attack;
        public int Defence;
        public int Health; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Attack.GetHashCode();
                hash = hash * 37 +Defence.GetHashCode();
                hash = hash * 37 +Health.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct EmitterData {
        public int Deg;
        public int Count;
        public LFloat LiveTime;
        public LFloat Interval;
        public LFloat Timer; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Deg.GetHashCode();
                hash = hash * 37 +Count.GetHashCode();
                hash = hash * 37 +LiveTime.GetHashCode();
                hash = hash * 37 +Interval.GetHashCode();
                hash = hash * 37 +Timer.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct AIData {
        public LFloat AITimer;
        public LFloat TargetDeg;
        public LFloat LerpInterval;
        public LFloat LerpTimer; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +AITimer.GetHashCode();
                hash = hash * 37 +TargetDeg.GetHashCode();
                hash = hash * 37 +LerpInterval.GetHashCode();
                hash = hash * 37 +LerpTimer.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct AnimData {
        public LVector4 Timer;
        public LVector4 LerpTimer;
        public LVector4Int AnimId1;
        public LVector4Int AnimId2; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Timer.GetHashCode();
                hash = hash * 37 +LerpTimer.GetHashCode();
                hash = hash * 37 +AnimId1.GetHashCode();
                hash = hash * 37 +AnimId2.GetHashCode();  
                return hash;
            }
        }
    }  
}                                                                                                                                                                                                                                                                                     