
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by GamesTan.Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepECS                                         
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using System.Runtime.InteropServices;                                                            
using System;                                                                                    
using System.Collections.Generic;                                                                
using System.Collections;                                                                        
using System.Runtime.CompilerServices;                                                           
using Lockstep.Game;                                                                             
using Lockstep.Math;                                                                             
using Unity.Burst;                                                                               
using Unity.Mathematics;                                                                                                                                                                            
namespace GamesTan.ECS.Game {  
    public unsafe partial struct PClassA {
        public String FuncA() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncA(ptr );
            }
        }
        public String FuncB() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncB(ptr );
            }
        }
        public void FuncCParam(int a, LFloat b, string c) {
            fixed (void* ptr =&this) {

                 VirtualFunctionExt.FuncCParam(ptr ,a ,b ,c);
            }
        } 
    }
    public unsafe partial struct SubClassA {
        public String FuncA() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncA(ptr );
            }
        }
        public String FuncB() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncB(ptr );
            }
        }
        public void FuncCParam(int a, LFloat b, string c) {
            fixed (void* ptr =&this) {

                 VirtualFunctionExt.FuncCParam(ptr ,a ,b ,c);
            }
        } 
    }
    public unsafe partial struct SubClassB {
        public String FuncA() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncA(ptr );
            }
        }
        public String FuncB() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncB(ptr );
            }
        }
        public void FuncCParam(int a, LFloat b, string c) {
            fixed (void* ptr =&this) {

                 VirtualFunctionExt.FuncCParam(ptr ,a ,b ,c);
            }
        } 
    }
    public unsafe partial struct SubClassBC {
        public void FuncCParam(int a, LFloat b, string c) {
            fixed (void* ptr =&this) {

                 VirtualFunctionExt.FuncCParam(ptr ,a ,b ,c);
            }
        }
        public void FuncDParam(int a, string b) {
            fixed (void* ptr =&this) {

                 VirtualFunctionExt.FuncDParam(ptr ,a ,b);
            }
        }
        public String FuncA() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncA(ptr );
            }
        }
        public String FuncB() {
            fixed (void* ptr =&this) {
                return 
                 VirtualFunctionExt.FuncB(ptr );
            }
        } 
    }
    public unsafe partial struct Enemy {
 
    }
    public unsafe partial struct Bullet {
 
    }
    public unsafe partial struct BulletEmitter {
 
    } 


    public unsafe partial class VirtualFunctionExt {
        public static String FuncA(void* voidPtr 

            
        ) {
            var ptr = (Entity*) voidPtr;
            if(ptr == null)
             return default;
            switch (ptr->TypeId) {
                case EntityIds.PClassA: return PClassA.FuncA_Virtual((PClassA*)voidPtr ); break;
                case EntityIds.SubClassA: return SubClassA.FuncA_Virtual((SubClassA*)voidPtr ); break;
                case EntityIds.SubClassB: return SubClassB.FuncA_Virtual((SubClassB*)voidPtr ); break;
                case EntityIds.SubClassBC: return SubClassB.FuncA_Virtual((SubClassB*)voidPtr  ); break; 

            }
            
            return default;
        }
        public static String FuncB(void* voidPtr 

            
        ) {
            var ptr = (Entity*) voidPtr;
            if(ptr == null)
             return default;
            switch (ptr->TypeId) {
                case EntityIds.PClassA: return PClassA.FuncB_Virtual((PClassA*)voidPtr ); break;
                case EntityIds.SubClassA: return PClassA.FuncB_Virtual((PClassA*)voidPtr  ); break;
                case EntityIds.SubClassB: return SubClassB.FuncB_Virtual((SubClassB*)voidPtr ); break;
                case EntityIds.SubClassBC: return SubClassB.FuncB_Virtual((SubClassB*)voidPtr  ); break; 

            }
            
            return default;
        }
        public static void FuncCParam(void* voidPtr 
          ,
            int a, LFloat b, string c
        ) {
            var ptr = (Entity*) voidPtr;
            if(ptr == null)
             return ;
            switch (ptr->TypeId) {
                case EntityIds.PClassA: PClassA.FuncCParam_Virtual((PClassA*)voidPtr ,a ,b ,c); break;
                case EntityIds.SubClassA: PClassA.FuncCParam_Virtual((PClassA*)voidPtr  ,a ,b ,c); break;
                case EntityIds.SubClassB: SubClassB.FuncCParam_Virtual((SubClassB*)voidPtr ,a ,b ,c); break;
                case EntityIds.SubClassBC: SubClassBC.FuncCParam_Virtual((SubClassBC*)voidPtr ,a ,b ,c); break; 
            }
            

        }
        public static void FuncDParam(void* voidPtr 
          ,
            int a, string b
        ) {
            var ptr = (Entity*) voidPtr;
            if(ptr == null)
             return ;
            switch (ptr->TypeId) {
                case EntityIds.SubClassBC: SubClassBC.FuncDParam_Virtual((SubClassBC*)voidPtr ,a ,b); break; 
            }
            

        } 
    }
}                                                                                                                                                                                                                                                                                     