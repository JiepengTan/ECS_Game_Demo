
#include "ShaderInclude_IndirectStructs.cginc"

#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#define LOD00_RANGE 500
#define LOD01_RANGE 2000

// (LOD00 + LOD01 + LOD02)
#define NUMBER_OF_DRAW_CALLS 3 
// (indexCount, instanceCount, startIndex, baseVertex, startInstance)
#define  NUMBER_OF_ARGS_PER_DRAW  5 
// 3draws * 5args = 15args
#define  NUMBER_OF_ARGS_PER_INSTANCE_TYPE  (NUMBER_OF_DRAW_CALLS * NUMBER_OF_ARGS_PER_DRAW) 

cbuffer CB
{
    uint _ShouldFrustumCull;
    uint _ShouldOcclusionCull;
    uint _ShouldDetailCull;
    uint _ShouldLOD;
    uint _ShouldOnlyUseLOD02Shadows;
    
    float _Lod0Distance;
    float _Lod1Distance;
    int _ShadowCascades;
    float _ShadowDistance;
    float _DetailCullingScreenPercentage;
    float2 _HiZTextureSize;
    float3 _CamPosition;
    
    float4x4 _UNITY_MATRIX_MVP;
    Texture2D<float4> _HiZMap;
    SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
};


StructuredBuffer<InstanceData> _InstanceDataBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _IsVisibleBuffer;
RWStructuredBuffer<uint> _ShadowArgsBuffer;
RWStructuredBuffer<uint> _ShadowIsVisibleBuffer;
RWStructuredBuffer<SortingData> _SortingData;


inline uint IsCameraOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
    float boundsSize = distance(maxPos, minPos);
    return ((distance(pos, maxPos) > boundsSize)
            + (distance(pos, minPos) > boundsSize));
}

inline uint IsVisibleAfterDetailCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY)
{
    return saturate(
            (distance(clipMinX, clipMaxX) >= _DetailCullingScreenPercentage)
            + (distance(clipMinY, clipMaxY) >= _DetailCullingScreenPercentage)
    );
}

// Hi-Z Culling
inline uint IsVisibleAfterOcclusionCulling(InstanceData instance, float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ)
{
    // Change it to 0 - 1 range 
    float2 minXY = float2(clipMinX, clipMinY) * 0.5 + 0.5;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5 + 0.5;
    
    // Calculate hi-Z buffer mip
    int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
    float mip = ceil(log2(max(size.x, size.y)));
    mip = clamp(mip, 0, 10);
    
    // find the max depth
    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    //const   int numSamples = 24;
    const   int   xSamples = 4; // numSamples + 1;
    const   int   ySamples = 4; // numSamples + 1;
    const  float    widthSS = (maxXY.x - minXY.x);
    const  float   heightSS = (maxXY.y - minXY.y);    
    const  float      stepX = widthSS / xSamples;    
    const  float      stepY = heightSS / ySamples;    
    
    float HIZdepth = 1;    
    float yPos = minXY.y;
    for(int y = 0; y < ySamples; ++y)
    {
        float xPos = minXY.x;
        for(int x = 0; x < xSamples; ++x)
        {
            const float2 nCoords0 = float2(xPos, yPos);
            HIZdepth = min(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
            xPos += stepX;
        }
        yPos += stepY;    
    }
    
    return (1.0 - clipMinZ) >= HIZdepth - 0.000015; // last is an epsilon
}

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    // x,y ~[-w,w] => xy ~ [-1,1]
    // z <w        => z  < 1
    return (clipPos.z > clipPos.w 
            || clipPos.x < -clipPos.w 
            || clipPos.x > clipPos.w 
            || clipPos.y < -clipPos.w 
            || clipPos.y > clipPos.w) 
            ? 0 : 1;
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )
{
    // Calculate the instance index
    uint tID = _dispatchThreadID.x;
    SortingData sortingData = _SortingData[tID];
    uint drawCall = (sortingData.drawCallInstanceIndex >> 24);
    uint index = (sortingData.drawCallInstanceIndex) & 0xFFFFFF;
    sortingData.threadDispatchID = tID;
    // Reset the is visible state
    _IsVisibleBuffer[tID] = 0;
    _ShadowIsVisibleBuffer[tID] = 0;

    // Get the instance data
    InstanceData instance = _InstanceDataBuffer[index];

    // Check if the instance is visible
    float3 minPos = instance.boundsCenter - instance.boundsExtents;
    float3 maxPos = instance.boundsCenter + instance.boundsExtents;

    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);

    float4 clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[0]);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);

    clipPos.xyz = clipPos.xyz / clipPos.w;
    float clipMinX = clipPos.x;
    float clipMaxX = clipPos.x;
    float clipMinY = clipPos.y;
    float clipMaxY = clipPos.y;
    float clipMinZ = clipPos.z;

    float minDistanceToCamera = distance(instance.boundsCenter.xyz, _CamPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[i]);

        // For Frustum
        isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));

        // For HiZ
        clipPos.xyz = clipPos.xyz / clipPos.w;
        clipMinX = min(clipPos.x, clipMinX);
        clipMaxX = max(clipPos.x, clipMaxX);
        clipMinY = min(clipPos.y, clipMinY);
        clipMaxY = max(clipPos.y, clipMaxY);
        clipMinZ = min(clipPos.z, clipMinZ);

        // For LODing
        minDistanceToCamera = min(distance(boxCorners[i].xyz, _CamPosition.xyz), minDistanceToCamera);
    }

    // We only cull instances where the camera doesn't intersect the instance 
    // bounds. If the camera is inside the bounds we want to render the object
    uint isVisible = 1;
    // ignore invalid bound => useless instance
    if(instance.boundsExtents.x <0.001 ) {
        isVisible = 0;
    }
    if (IsCameraOutsideObjBounds(_CamPosition, minPos, maxPos))
    {
        // Too far to sort
        isVisible *= minDistanceToCamera < (MAX_SORT_INSTANCE_DISTANCE-1);
        // Do we pass the frustum culling...?
        isVisible *= _ShouldFrustumCull ? isInFrustum : 1;

        // Do we pass the occlusion culling...?
        //isVisible *= (_ShouldOcclusionCull * isVisible > 0) ? IsVisibleAfterOcclusionCulling(instance, clipMinX, clipMaxX, clipMinY, clipMaxY, clipMinZ) : 1;

        // // // Do we pass the detail (screen size) culling...?
        isVisible *= (_ShouldDetailCull * isVisible > 0) ? IsVisibleAfterDetailCulling(clipMinX, clipMaxX, clipMinY, clipMaxY) : 1;
    }
    
    if(isVisible  == 0) {
        minDistanceToCamera = MAX_SORT_INSTANCE_DISTANCE-1 ;// < 4096
    }
    float lod00Range = _Lod0Distance;
    float lod01Range = _Lod1Distance;

 
    // Calculate the correct index to the arguments buffers
    // (indexCount, instanceCount, startIndex, baseVertex, startInstance)
    uint argsIndex = drawCall* NUMBER_OF_ARGS_PER_INSTANCE_TYPE + 1;
    uint shadowArgsIndex = argsIndex;
    argsIndex += 5 * (minDistanceToCamera > lod00Range);
    argsIndex += 5 * (minDistanceToCamera > lod01Range);
    argsIndex = _ShouldLOD * argsIndex + ((_ShouldLOD == 0) * (drawCall + 11));

    shadowArgsIndex += 5 ;// shadow do not use lod0
    shadowArgsIndex += 5 * (minDistanceToCamera > lod00Range);

    // Mark it as a shadow caster if it's within shadow distance...
    uint isCastingShadow = minDistanceToCamera < _ShadowDistance ? 1 : 0;

    // Output
    _IsVisibleBuffer[tID] = isVisible;
    InterlockedAdd(_ArgsBuffer[argsIndex], isVisible);

    _ShadowIsVisibleBuffer[tID] = isCastingShadow;
    InterlockedAdd(_ShadowArgsBuffer[shadowArgsIndex], isCastingShadow);
    // 4096*100 < 4096*128 <  (1<<12 * 1<<7)
    uint head = ((1-isVisible)<<31 ) + (drawCall <<22 );
    sortingData.distanceToCam = head + floor(minDistanceToCamera*100) ;
    _SortingData[tID] = sortingData;
}