//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------

#include "ShaderInclude_IndirectStructs.cginc"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel BitonicSort
#pragma kernel MatrixTranspose

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define BITONIC_BLOCK_SIZE 256
#define TRANSPOSE_BLOCK_SIZE 8

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
    uint _Level;
    uint _LevelMask;
    uint _Width;
    uint _Height;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

StructuredBuffer<SortingData> _Input;
RWStructuredBuffer<SortingData> _Data;


//--------------------------------------------------------------------------------------
// Bitonic Sort Compute Shader
//--------------------------------------------------------------------------------------
groupshared SortingData _SharedData[BITONIC_BLOCK_SIZE];

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void BitonicSort(
    uint3 Gid  : SV_GroupID, 
    uint3 DTid : SV_DispatchThreadID, 
    uint3 GTid : SV_GroupThreadID, 
    uint  GI   : SV_GroupIndex)
{
    uint tID = DTid.x;
    _SharedData[GI] = _Data[tID];
    GroupMemoryBarrierWithGroupSync();

    // Sort the shared data
    for (uint j = _Level >> 1; j > 0; j >>= 1)
    {
        SortingData result = _SharedData[GI];
        SortingData inst1 = _SharedData[GI & ~j];// 提取左边的元素
        SortingData inst2 = _SharedData[GI | j]; // 提取右边的元素
        // drawCallInstanceIndex = ((((uint)prefabIdx * NUMBER_OF_ARGS_PER_INSTANCE_TYPE) << 16)  + ((uint) instanceIdx)),
        uint dist1 = inst1.distanceToCam;
        uint dist2 = inst2.distanceToCam;
        if ((dist1 <= dist2) == ((bool)(_LevelMask & tID))) // _LevelMask & tID 表示当前是不是降序 的part   ， _LevelMask == level = j*2
        {
            result = _SharedData[GI ^ j];//左=>右  右=>左  // swap
        }
        GroupMemoryBarrierWithGroupSync();

        _SharedData[GI] = result;
        GroupMemoryBarrierWithGroupSync();
    }

    // Store shared data
    _Data[tID] = _SharedData[GI];
}

//--------------------------------------------------------------------------------------
// Matrix Transpose Compute Shader
//--------------------------------------------------------------------------------------
groupshared SortingData _SharedTransposeData[TRANSPOSE_BLOCK_SIZE * TRANSPOSE_BLOCK_SIZE];

[numthreads(TRANSPOSE_BLOCK_SIZE, TRANSPOSE_BLOCK_SIZE, 1)]
void MatrixTranspose(
    uint3 Gid  : SV_GroupID, 
    uint3 DTid : SV_DispatchThreadID, 
    uint3 GTid : SV_GroupThreadID, 
    uint  GI   : SV_GroupIndex)
{
    _SharedTransposeData[GI] = _Input[DTid.y * _Width + DTid.x];
    GroupMemoryBarrierWithGroupSync();

    uint2 XY = DTid.yx - GTid.yx + GTid.xy;
    _Data[XY.y * _Height + XY.x] = _SharedTransposeData[GTid.x * TRANSPOSE_BLOCK_SIZE + GTid.y];
}

