
#include "ShaderInclude_IndirectStructs.cginc"

#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 128
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

// why not use transform ?
StructuredBuffer<TransformData> _TransformData;
// why not use Indirect3x3Matrix?
RWStructuredBuffer<IndirectMatrix> _InstancesDrawMatrixRows;

float4x4 rotationMatrix(float3 axis, float angle)
{
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;

	return float4x4(
		oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0.0,
		oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,
		oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0.0,
		0, 0, 0,          1.0);
}

// https://forum.unity.com/threads/incorrect-normals-on-after-rotating-instances-graphics-drawmeshinstancedindirect.503232/#post-3277479
float4x4 inverse(float4x4 input)
{
	#define minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))
	
		float4x4 cofactors = float4x4(
			minor(_22_23_24, _32_33_34, _42_43_44),
			-minor(_21_23_24, _31_33_34, _41_43_44),
			minor(_21_22_24, _31_32_34, _41_42_44),
			-minor(_21_22_23, _31_32_33, _41_42_43),
	
			-minor(_12_13_14, _32_33_34, _42_43_44),
			minor(_11_13_14, _31_33_34, _41_43_44),
			-minor(_11_12_14, _31_32_34, _41_42_44),
			minor(_11_12_13, _31_32_33, _41_42_43),
	
			minor(_12_13_14, _22_23_24, _42_43_44),
			-minor(_11_13_14, _21_23_24, _41_43_44),
			minor(_11_12_14, _21_22_24, _41_42_44),
			-minor(_11_12_13, _21_22_23, _41_42_43),
	
			-minor(_12_13_14, _22_23_24, _32_33_34),
			minor(_11_13_14, _21_23_24, _31_33_34),
			-minor(_11_12_14, _21_22_24, _31_32_34),
			minor(_11_12_13, _21_22_23, _31_32_33)
			);
	#undef minor
	return transpose(cofactors) / determinant(input);
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
		in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
		in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
		in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
		in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
	)        
{
	uint tID = _dispatchThreadID.x;
	TransformData transData = _TransformData[tID];
	float3 position = transData.pos;
	float3 scale = transData.scale;
	float3 rotation = transData.rot;

	// TODO direct build the rotation matrix by euler
	float4x4 xRotationMatrix = rotationMatrix(float3(1, 0, 0), radians(rotation.x));
	float4x4 yRotationMatrix = rotationMatrix(float3(0, 1, 0), radians(rotation.y));
	float4x4 zRotationMatrix = rotationMatrix(float3(0, 0, 1), radians(rotation.z));
	float4x4 rotMatrix = mul(yRotationMatrix, mul(zRotationMatrix, xRotationMatrix));
	float4x4 translation = {
		scale.x, 0, 0, position.x,
		0, scale.y, 0, position.y,
		0, 0, scale.z, position.z,
		0, 0, 0, 1
	};
	float4x4 objectToWorld = mul(translation, rotMatrix);
	//float4x4 worldToObject = inverse(objectToWorld);
    
	IndirectMatrix rows01;

	rows01.row0 = objectToWorld[0];
	rows01.row1 = objectToWorld[1];
	rows01.row2 = objectToWorld[2];

	_InstancesDrawMatrixRows[tID] = rows01;
}